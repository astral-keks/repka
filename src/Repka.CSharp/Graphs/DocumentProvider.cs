using Repka.Collections;
using Repka.Diagnostics;
using Repka.FileSystems;
using static Repka.Graphs.DocumentDsl;
using static Repka.Graphs.ProjectDsl;

namespace Repka.Graphs
{
    public class DocumentProvider : GraphProvider
    {
        public override void AddTokens(GraphKey key, Graph graph)
        {
            DirectoryInfo directory = new(key);
            if (directory.Exists)
            {
                List<FileInfo> documentFiles = directory.EnumerateFiles("*.cs", SearchOption.AllDirectories)
                    .AsParallel().WithDegreeOfParallelism(8)
                    .ToList();
                ProgressPercentage documentProgress = Progress.Percent("Collecting documents", documentFiles.Count);
                foreach (var token in GetDocumentTokens(documentFiles.Peek(documentProgress.Increment), graph.Projects()))
                    graph.Add(token);
                documentProgress.Complete();
            }
        }

        private IEnumerable<GraphToken> GetDocumentTokens(IEnumerable<FileInfo> documentFiles, IEnumerable<ProjectNode> projectNodes)
        {
            Dictionary<string, List<ProjectNode>> projectsByPath = projectNodes 
                .GroupBy(projectNode => projectNode.Directory)
                .ToDictionary(group => group.Key, group => group.ToList());
            foreach (var documentFile in documentFiles)
            {
                bool isAutogenerated = documentFile.FullName.Contains(@"\obj\");
                bool isIgnored = isAutogenerated && (
                    documentFile.Name.EndsWith("AssemblyAttributes.cs") || 
                    documentFile.Name.EndsWith("AssemblyInfo.cs"));
                if (isIgnored)
                    continue;

                GraphKey documentKey = new(documentFile.FullName);
                yield return new GraphNodeToken(documentKey, DocumentLabels.Document, 
                    isAutogenerated ? DocumentLabels.Autogenerated : string.Empty);

                foreach (var documentProjectNode in GetDocumentProjects(documentFile, isAutogenerated, projectsByPath))
                    yield return new GraphLinkToken(documentProjectNode.Key, documentKey, DocumentLabels.Document);
            }
        }

        private IEnumerable<ProjectNode> GetDocumentProjects(FileInfo documentFile, bool isAutogenerated, 
            Dictionary<string, List<ProjectNode>> projectsByPath)
        {
            string? ownerDirectory = documentFile.ParentDirectories().Select(directory => directory.FullName)
                .FirstOrDefault(path => projectsByPath.ContainsKey(path));
            if (ownerDirectory is not null)
            {
                IEnumerable<ProjectNode> documentProjects = projectsByPath[ownerDirectory];
                if (!isAutogenerated)
                    documentProjects = documentProjects.Where(ownerNode => 
                        ownerNode.HasSdk || ownerNode.DocumentReferences.Contains(documentFile.FullName));
                foreach (var documentProjectNode in documentProjects)
                {
                    yield return documentProjectNode;
                }
            }
        }
    }
}
