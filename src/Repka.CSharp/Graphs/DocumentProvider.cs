using Repka.Collections;
using Repka.Diagnostics;
using Repka.FileSystems;
using static Repka.Graphs.DocumentDsl;
using static Repka.Graphs.ProjectDsl;

namespace Repka.Graphs
{
    public class DocumentProvider : GraphProvider
    {
        public override void AddTokens(GraphKey key, Graph graph)
        {
            DirectoryInfo directory = new(key);
            if (directory.Exists)
            {
                FileInfo[] documentFiles = directory.GetFiles("*.cs", SearchOption.AllDirectories);
                ProgressPercentage documentProgress = Progress.Percent("Collecting documents", documentFiles.Length);

                Dictionary<string, List<ProjectNode>> projectsByDocuments = graph.Projects()
                    .SelectMany(projectNode => projectNode.DocumentReferences
                        .Select(documentReference => (Document: documentReference, Project: projectNode)))
                    .GroupBy(record => record.Document, record => record.Project)
                    .ToDictionary(group => group.Key, group => group.ToList());
                Dictionary<string, List<ProjectNode>> projectsByDirectory = graph.Projects()
                    .GroupBy(projectNode => projectNode.Directory)
                    .ToDictionary(group => group.Key, group => group.ToList());
                
                IEnumerable<GraphToken> tokens = documentFiles.AsParallel(8)
                    .Peek(documentProgress.Increment)
                    .SelectMany(documentFile => GetDocumentTokens(documentFile, projectsByDocuments, projectsByDirectory))
                    .ToList();
                foreach (var token in tokens)
                    graph.Add(token);
                
                documentProgress.Complete();
            }
        }

        private IEnumerable<GraphToken> GetDocumentTokens(FileInfo documentFile,
            Dictionary<string, List<ProjectNode>> projectsByDocuments,
            Dictionary<string, List<ProjectNode>> projectsByDirectory)
        {
            bool isAutogenerated = documentFile.FullName.Contains(@"\obj\");
            bool isIgnored = isAutogenerated && (
                documentFile.Name.EndsWith("AssemblyAttributes.cs") ||
                documentFile.Name.EndsWith("AssemblyInfo.cs"));
            if (!isIgnored)
            {
                GraphKey documentKey = new(documentFile.FullName);
                yield return new GraphNodeToken(documentKey, DocumentLabels.Document,
                    isAutogenerated ? DocumentLabels.Autogenerated : string.Empty);

                foreach (var documentProjectNode in GetDocumentProjects(documentFile, isAutogenerated, projectsByDocuments, projectsByDirectory))
                    yield return new GraphLinkToken(documentProjectNode.Key, documentKey, DocumentLabels.Document);
            }
        }

        private IEnumerable<ProjectNode> GetDocumentProjects(FileInfo documentFile, bool isAutogenerated, 
            Dictionary<string, List<ProjectNode>> projectsByDocuments,
            Dictionary<string, List<ProjectNode>> projectsByDirectory)
        {
            List<ProjectNode>? documentProjects;

            if (!projectsByDocuments.TryGetValue(documentFile.FullName, out documentProjects))
            {
                string? projectDirectory = documentFile.ParentDirectories()
                    .Select(directory => directory.FullName)
                    .FirstOrDefault(path => projectsByDirectory.ContainsKey(path));
                if (projectDirectory is not null)
                {
                    documentProjects = projectsByDirectory[projectDirectory];
                    if (!isAutogenerated)
                    {
                        documentProjects = documentProjects
                            .Where(documentProject => documentProject.HasSdk)
                            .ToList();
                    }
                }
            }

            return documentProjects ?? Enumerable.Empty<ProjectNode>();
        }
    }
}
